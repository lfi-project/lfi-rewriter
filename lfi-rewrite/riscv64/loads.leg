%{
#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \
%}

Top = LdRv 

LdRv = l:LDRV rt:REG COMMA addr:AddrP {
    if (strcmp(rt.val, "ra") == 0) {
        if (addr.pre) mkinsn("%s", addr.pre);
        mkinsn("%s x24, %s", l.val, addr.val);  
        mkinsn("add.uw x26, x24, x27");         
        mkinsn("andi ra, x26, %s", bundle_mask_constant()); 
        if (addr.post) mkinsn("%s", addr.post);
        rfree(l); rfree(rt); rfree(addr);
    } else {
        ldst(l, rt, addr);
    }
}


# RISCV Loads prefixes

LDRV = < (
    'l' [bhwd][u]?
    | 'fl' [wd]
) > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }




%%

void
riscv64_loadspass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
