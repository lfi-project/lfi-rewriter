%{
#include "riscv64/riscv64.h"
#include "op.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \
%}

Top = RvBr | RvCall


RvBr = b:BRANCH r:REG {
    if (strcmp(b.val, "jalr") == 0) {
        mkdirective(".bundle_lock align_to_end");
        mkinsn("%s %s", b.val, r.val);
        mkdirective(".bundle_unlock");
    } else {
        mkdirective(".bundle_lock");
        mkinsn("add.uw x26, %s, x27", r.val);
        mkinsn("andi x25, x26, %s", bundle_mask_constant());
        mkinsn("%s x25", b.val);  
        mkdirective(".bundle_unlock");
        mkdirective(bundle_align());
    }
    rfree(b); rfree(r);
}

RvCall = 'call' - t:NAME {
    mkdirective(".bundle_lock align_to_end");
    mkinsn("call %s", t.val);
    mkdirective(".bundle_unlock");
    rfree(t);
}

BRANCH = < ('jr' | 'jalr') > - {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}


NAME = < ID > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

%%

void
riscv64_branchpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
